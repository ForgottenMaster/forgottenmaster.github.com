<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Let&#39;s Learn Vulkan on Robin Firth</title>
    <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/</link>
    <description>Recent content in Let&#39;s Learn Vulkan on Robin Firth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 09 Jan 2023 22:43:32 +0000</lastBuildDate><atom:link href="https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5. Swapchain</title>
      <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/swapchain/</link>
      <pubDate>Sun, 19 Feb 2023 12:21:42 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/swapchain/</guid>
      <description>Now that we&amp;rsquo;ve been able to create the device surface, and get appropriate information about what formats, color spaces, and presentation modes are available, we are ready to tackle the next step in setting up a rendering environment. This next step will be what&amp;rsquo;s called a swapchain
What is screen tearing? On the front-end side of things, the device surface represents the rendering context and can be considered &amp;ldquo;the window&amp;rdquo; for our purposes.</description>
    </item>
    
    <item>
      <title>4. Surface</title>
      <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/surface/</link>
      <pubDate>Sat, 18 Feb 2023 12:08:01 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/surface/</guid>
      <description>The next thing we need to set up is called a surface. Since Vulkan does not interact directly with the windowing system in use, due to OS differences etc.
Instead, Vulkan uses a common API to interact with a surface, and then uses extensions on a per platform basis to handle the differences of actually creating this surface type.
Surface extensions We could manually detect the platform we&amp;rsquo;re compiling on, and then enable the appropriate extension through the Vulkan API, for example we could do:</description>
    </item>
    
    <item>
      <title>3. Validation</title>
      <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/validation/</link>
      <pubDate>Sat, 18 Feb 2023 01:04:25 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/validation/</guid>
      <description>By default, Vulkan will not perform any validation above or beyond checking preconditions for API calls. It won&amp;rsquo;t catch things like forgetting to destroy a Vulkan object, or other issues with parameters passed to API calls.
This is because Vulkan will do the bare minimum by default for efficiency - what we don&amp;rsquo;t use we don&amp;rsquo;t pay for, and this includes extra validations that can cause incorrect but safe behaviours.</description>
    </item>
    
    <item>
      <title>2. The Window, the Instance, and the Device</title>
      <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/instance-and-device/</link>
      <pubDate>Wed, 15 Feb 2023 22:32:00 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/instance-and-device/</guid>
      <description>The first things we&amp;rsquo;ll need to do to start using Vulkan will be to open a window to render into, create a Vulkan instance, and create a logical Vulkan device from that instance.
The end result will just show a blank white window as shown below.
Event loop and window The first step which we can get out of the way before even touching Vulkan will be to create a window for us to eventually render into, and an event loop that winit uses to allow us to handle the events from the user such as resizing etc.</description>
    </item>
    
    <item>
      <title>1. Setup</title>
      <link>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/setup/</link>
      <pubDate>Mon, 09 Jan 2023 22:43:32 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/vulkan/lets-learn-vulkan/setup/</guid>
      <description>In order to follow along with the course, we&amp;rsquo;ll want to get the project up and running, and nail down the tech stack we&amp;rsquo;ll be using.
The Stack  The language - Rust The Vulkan crate - ash The windowing crate - winit The window abstraction crate - raw-window-handle The glue crate - ash-window  Install Rust If the Rust toolchain is already installed, we can skip this bit. Luckily Rust is easy enough to install.</description>
    </item>
    
  </channel>
</rss>
