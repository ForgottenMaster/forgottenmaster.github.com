<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Chapter 5 - Convolutional Neural Networks on Robin Firth</title>
    <link>https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/</link>
    <description>Recent content in Chapter 5 - Convolutional Neural Networks on Robin Firth</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 30 Dec 2022 22:12:16 +0000</lastBuildDate><atom:link href="https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5.2 - Convolutional Layers</title>
      <link>https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/convolutionlayers/</link>
      <pubDate>Fri, 30 Dec 2022 23:05:00 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/convolutionlayers/</guid>
      <description>The previous post explained the basic multichannel convolution operation but we now take a look at how we can integrate it into a neural network.
Architecture In a regular dense layer we can think of a first hidden layer outputting h1 neurons, or learned features.
If we have another hidden layer taking these h1 neurons as input and producing h2 neurons then this layer needs h1 x h2 weights in order to represent that each of the output neurons is some linear combination of all the input neurons.</description>
    </item>
    
    <item>
      <title>5.1 - Introduction</title>
      <link>https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/introduction/</link>
      <pubDate>Fri, 30 Dec 2022 22:17:58 +0000</pubDate>
      
      <guid>https://forgottenmaster.github.io/posts/machinelearning/deeplearningfromscratch/chapter5/introduction/</guid>
      <description>With the standard feed-forward architecture we used in the chapters until this point, we are able to input a collection of observations, with each observation having a number of features. In the case of the MNIST recognition network, these features were the greyscale pixel values.
However, such a &amp;ldquo;flat&amp;rdquo; model has no knowledge or concept of &amp;ldquo;closeness&amp;rdquo; of features to one another. This means that the learned features in a hidden layer, derived as some linear combination of the input pixel data could draw from pixels that are nowhere near each other in the input.</description>
    </item>
    
  </channel>
</rss>
